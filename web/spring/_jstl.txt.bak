JSTL(JSP Standard Tag Library)
 - 웹 애플리케이션 개발 플랫폼을 위한 컴포넌트 모음으로 데이터 처리와 조건문, 반목문 등의 작업을 스크립틀릿이 아닌 태그 라이브러리로 작업하는 것

 - 장점
 	빠른 개발 : JSP를 단순화하는 많은 태그들을 제공해줌
	스크립틀릿을 사용할 필요가 없음 : 디자이너나 퍼블리셔, 프론그 개발자 등이 소스 보기가 편해짐

스프링 없이 사용 시
 - 다운로드
 	https://tomcat.apache.org/ 의 왼쪽 메뉴들 중 Download 메뉴의 Taglibs 클릭 후
	화면 하단의 링크에서 'taglibs-standard-impl-1.2.5.jar',
	'taglibs-standard-spec-1.2.5.jar', 'taglibs-standard-jstlel-1.2.5.jar' 세 개의 파일을 다운받아 ~/WebContent/WEB-INF/lib 폴더에 저장한 후 사용함

스프링에서 사용 시
- https://mvnrepository.com/ dptj 'jstl'과 'taglibs standard impl'을 검색
 - pom.xml에 <dependency> 추가
<!-- https://mvnrepository.com/artifact/javax.servlet/jstl -->
<dependency>
    <groupId>javax.servlet</groupId>
    <artifactId>jstl</artifactId>
    <version>1.2</version>
</dependency>

 taglibx standard impl
 <!-- https://mvnrepository.com/artifact/org.apache.taglibs/taglibs-standard-impl -->
<dependency>
    <groupId>org.apache.taglibs</groupId>
    <artifactId>taglibs-standard-impl</artifactId>
    <version>1.2.5</version>
    <scope>runtime</scope>
</dependency>

- JSTL은 일반적으로 JSTL과 EL의 조합을 의미하는 경우가 많음
 
 
El(Expression Language)
 - JSP에서 제공하는 표현식 (<%=test %>)을 대신하여 좀 더 편리하게 출력하기 위해 제공되는 언어임
  예) <%=test %>을 EL로 표현하면 ${test}

- EL에는 여러 내장 객체가 존재함			
	pageScope : Page 영역(요청을 받은 페이지)에 존재하는 객체를 참조할 때 사용
	requestScope : Request 영역(요청을 받은 페이지와 디스패치 방식으로 이동한 페이지 포함)에 존재하는 객체를 참조할 때 사용
	sessionScope : Session 영역(사이트 전체를 의미하며, 시간적 제한이 있음)에 존재하는 객체를 참조할 떄 사용
	applicationScope : application 영역(사이트 전체를 의미하며, 웹 서버가 멈출 때 까지 존재)에 존재하는 객체를 참조할 때 사용
	param : 파라미터 값을 얻어올 때 사용
	paramValues : 파라미터 값을 배열로 얻어올 때 사용
	header : Header 정보를 얻어올 때 사용
	headerValues : Header 정보를 배열로 얻어올 때 사용
	cookie : 쿠키 객체를 참조할 때 사용

 - EL의 연산자
 	산술연산자
	+ - * / % : 사칙연산과 나머지 연산자(나누기는 div, 나머지는 mod로 대체할 수 있음)
	비교연산자
	==, eq : 두 값이 같은지 여부
	!=, ne : 두 값이 다른지 여부
	<, lt : 보다 작다로 연산자의 왼쪽 항이 오른쪽 항보다 작으면 true
	>, gt : 보다 크다로 연산자의 왼쪽 항이 오른쪽 항보다 크면 true
	<=, le : 작거나 같다 연산자의 왼쪽 항이 오른쪽 항보다 작거나 같으면 true
	>=, ge : 크거나 같다 연산자의 왼쪽 항이 오른쪽 항보다 크거나 같으면 true
	논리연산자
	&&, and : 조건이 모두 참이며면 true
	||, or : 조건들 중 하나라도 참이면 true
	!, not : true를 false로, false를 true로 리턴

JSTL의 액션 - JSTL core
 - core는 JSTL의 기본적인 기능들을 구현해 놓은 라이브러리임(분기문, 반복문)
 - core 기능을 사용하려면 라이브러리를 페이지에서 등록해야 함

1. core 등록법
	<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c" %>
	prefix="c" : core 태그를 사용할 때 붙일 접두어로 core이므로 보통 c를 사용함
2. core 라이브러리의 태그들
2-1) 출력관련 태그 : <c:out>
	 - 문법 : <c:out value="출력값" default="기본값" excapeXml="true of false" /> 
	 value : 출력할 값
	 default : 기본값으로 value가 null일 경우 기본값이 출력됨
	 excapeXml : 기본값음 false이며, 특수기호를 처리하는 방법을 지정
	  - excapeXml의 값이 true이면 '<'를 '&lt;'로 표현

2-2) 변수 설정 및 삭제 태그 : <c:set>, <c:remove>
 - 문법1 : <c: set var="변수명" value="값"[ target="객체" property="값" scope="범위"] />
	 var : 값을 저장할 변수 이름(지정한 영역의 attribute를 의미)
	 value : var에서 지정한 변수의 값
	 target : 값을 설정할 프로퍼티에 대한 객체로 생략하는 경우가 많음
	 property : 값을 설정할 객체의 프로퍼티로 생략하는 경우가 많음
	 scope : 변수를 사용할 수 있는 유효 범위로 page, request, session, application중 택일(기본값은 page)

 - 문법2 : <c:remove var="삭제할 변수명"[ scope="범위" ] />
 	var : 값을 삭제할 변수명
	scope : 삭제할 변수의 범위

2-3) 예외 처리 태그 : <c:catch>
 - 문법 : <c:catch var=예외 클래스명">예외 발생 가능성이 있는 코드</c:catch>
 
2-4) 조건 처리 태그 : <c:if>, <c:choose>, <c:when>, <c:otherwies>
 - 문법1 : <c:if test="조건" [ var="변수명" scope="범위" ]>실행코드</c:if>
 	if 태그에는 else가 따로 없어서 여러 조건이나 else가 필요할 경우 choose 태그를 사영 해야 함
	test : 조건식으로 true이면 지정한 실행코드가 동작함
	var : test 결과를 저장하는 변수
	scope: var로 지정한 변수의 사용 범위로 page, request, session, application중 택일(기본값은 page)

- 문법2 : java의 switch문과 비슷하나 조건식을 입력할 수 있음
	<c:choose>
		<c:when test="조건1">실행문1</c:when>
		<c:when test="조건2">실행문2</c:when>
		...
		<c:when test="조건n">실행문n</c:when>
		<c:otherwise>기본 실행문</c:otherwise>
	</c:choose>
		- otherwise는 switch문의 default절이나 if문의 else절과 동일하게 모든 조건이 거짓일 경우 실행되는 영역임

2-5) 반복 처리 태그 : <c:forEach>,<c:forTokens>
 - forEach 문법 : for문과 for-each문을 합한 형태
 	<c:forEach items="목록데이터명" begin="시작인덱스" end="종료인덱스" var="변수명" step="증감분" varStatus="상태변수명">
		실행문
	</c:forEach>
	items : 루프를 돌릴 객체로 배열이나 컬렉션 객체가 지정됨
	 - items에 넣을 수 있는 객체 : 배열, Collection, Iterator, Enumeration, 쉼표로 구분된 문자열
	begin : 루프를 돌릴 시작 인덱스 번호
	end : 마지막 인덱스 번호
	var : items에서 꺼낸 항목을 저장할 변수명
	step : 인덱스 번호의 증감분
	varStatus : 상태값을 지정할 변수명
	 - 변수명을 status로 했다면
	  ${status.current}	:	현재 for문에 해당하는 번호
	  ${status.index}	:	0부터의 순서
	  ${status.count}	:	1부터의 순서
	  ${status.first}	:	첫 번째인지 여부
	  ${status.last}	:	마지막인지 여부
	  ${status.begin}	:	for문의 시작 번호
	  ${status.end}		:	for문의 끝 번호
	  ${status.step}	:	for문의 증감값

	- forTokens 문법 : for문과 StringTokenizer 클래스를 합한 형태
	<c:forTokens items="문자열" delims="구분자" begin="시작인덱스" end="종료인덱스" var="변수명" step="증감분" >
		실행문
	</c:forTokens>
	items : 잘라서 사용할 문자열로 특정 구분자로 구분되어 있어야 함
	delims : items의 문자열을 자를 구분자로 한 글자를 구분자로 사용함
	 - 여러 글자를 입력할 경우 각각의 글자가 모두 구분자로 동작함
	begin : 루프를 돌릴 시작 인덱스 번호
	end : 마지막 인덱스 번호
	var : delims를 기준으로 items를 잘라 각 조각을 저장할 변수명
	step : 인덱스 번호의 증감분

2-6) 페이지 처리 태그 : <c:url>, <c:param>, <c:redirect>, <c:import>
 - url 문법 : 쿼리스트링을 포함한 url을 만들어 주는 태그
 	<c:url var="변수명" value="url">
		<c:param name="파라미터명1" value="값1" />
		<c:param name="파라미터명2" value="값2" />
		...
		<c:param name="파라미터명n" value="값n" />
	</c:url>
	var : 만들어진 url이 저장될 변수
	value : 사용할 url
	param : 쿼리스트링으로 보낼 변수명과 값을 지정

- redirect 문법 : HttpServletResponse 클래스의 sendRedirect() 메소드를 실행
	<c:redirect url="이동할 url" />

- import 문법
	<c:import url="url값" var="변수명" scope="범위" charEncoding="인코딩" />
	url : import할 파일의 위치 및 파일명
	var : import되는 파일의 내용이 저장될 변수명
	scope : var속성의 변수의 사용범위
	charEncoding : import하는 파일의 인코딩 방식을 지정

 JSTL의 함수
 - 문자열을 처리하는 함수를 제공함
 - 해당 기능을 사용하려면 라이브러리를 페이지에서 등록해야 함
1. 등록법
-  <%@ taglib uri="http://java.sun.com/jsp/jstl/functions" prefix="fn" %>
	prefix="fn" : function 태그를 사용할 때 붙일 접두어로 function은 거의 fn을 사용함
2. 함수의 종류
   contains : 문자열에서 특정 문자열이 포함되어 잇는지 여부를 리턴(대소문자 구분)
   containsIgnoreCase : 문자열에서 특정 문자열이 포함되어 잇는지 여부를 리턴(대소문자 구분 안함)
    ${ fn:contains("원본 문자열", "찾을 문자열") }
    ${ fn:containsIgnoreCase("원본 문자열", "찾을 문자열") }

   startsWith : 문자열에서 지정한 문자열로 시작하는 지 여부를 리턴
   endsWith : 문자열에서 지정한 문자열로 종료하는 지 여부를 리턴
    ${ fn:startsWith("원본 문자열", "검사할 문자열") }
    ${ fn:endsWith("원본 문자열", "검사할 문자열") }

   escapeXml : 문자열에 포함되어 있는 <, >, &, ', " 문자들을 &lt; &gt; &amp; &#039; &#034; 로 변경후 리턴
    ${ fn:escapeXml("변경할 문자열") }

   indexOf : 문자열에서 지정한 문자열이 몇번 인덱스에 있는지 인덱스 번호를 리턴
    ${ fn:indexOf("원본 문자열", "찾을 문자열") }

   split : 문자열을 지정한 구분자를 기준으로 잘라 문자열 배열로 리턴
    ${ fn:split("원본 문자열", "구분자") }

   join : 배열의 값들을 지정한 구분자를 통해 합쳐서 문자열로 리턴
    ${ fn:join(배열, "구분자") }

   length : 문자열의 글자수나 배열이나 컬렉션의 요소의 개수를 리턴
    ${ fn:length("문자열이나 배열, 컬렉션") }

   replace : 문자열에서 특정 문자열을 지정한 문자열로 변경 후 리턴
    ${ fn:replace("원본 문자열", "찾을 문자열", "바꿀 문자열") }

   substring : 문자열에서 지정한 인덱스 범위에 맞는 문자열을 잘라내어 리턴
    ${ fn:substring("원본 문자열", "시작 인덱스", "종료 인덱스") }
   substringBefore : 문자열에서 지정한 구분자를기준으로 구분자 이전의 문자열을 리턴
   substringAfter : 문자열에서 지정한 구분자를기준으로 구분자 이후의 문자열을 리턴
    ${ fn:substringBefore("원본 문자열", "구분자") }
    ${ fn:substringAfter("원본 문자열", "구분자") }

   toLowerCase : 지정한 문자열의 영문들을 모두 소문자로 변경하여 리턴
   toUpperCase : 지정한 문자열의 영문들을 모두 대문자로 변경하여 리턴
    ${ fn:toLowerCase("문자열")) }
    ${ fn:toUpperCase("문자열")) }

   trim : 문자열과 앞과 뒤의 공백을 제거한 후 리턴
    ${ fn:trim("문자열") }

3. JSTL Formating
 - 숫자나 날짜 등의 표기형식을 지원

 1. formmatting 등록법
-  <%@ taglib uri="http://java.sun.com/jsp/jstl/fmt" prefix="fmt" %>

 2. 숫자 표기
  - parseNumber : 통화, 백분율 또는 숫자의 문자열 표현을 표시
  - formatNumber : 특정 형식 또는 정빌도로 숫자 값을 형식화하는 데 사용
 
 3. 날짜 표기
  - <fmt:formatDate value="날짜데이터"
  	[type="{time | date | both}"]
  	[dateStyle="{dafault | short | medium | long | full}"]
  	[timeStyle="{dafault | short | medium | long | full}"]
  	[pattern="customPattern"]
  	[timeZone="timeZone"]
  	[var="변수명"]
  	[scope="{page | request | session | application}"]

 - value : 날짜 및 시간 데이터(time패키지 사용불가, java.util.Date 인스턴스 사용)
 - type : 형식화할 데이터의 종류를 지정 - 시간(time), 날짜(date), 모두(both)