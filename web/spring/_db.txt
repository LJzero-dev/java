JdbcTemplate
 - 스프링에서는 DataSource나 Connection, Statement, ResultSet을 직접 사용하지 않고 JdbcTemplate을 이용해서 편하게 쿼리를 실행할 수 있음
 - JdbcTemplate을 사용하려면 DB와 상호작용할 클래스에서 JdbcTemplate 객체를 생성해서 사용해야 합니다, 또한 해당 클래스에서 설정에서 빈으로 등록해야 함

1. select 쿼리 실행
 - JdbcTemplate 클래스는 select 쿼리 실행을 위해 query()와 queryForObject() 메소드를 제공

 1-1. queryForObject() 메소드
  - 결과가 1행인 경우 사용하는 메소드
  - 단, 결과가 2행 이상인 경우 IncorrectResultSizeDataAccessException 발생
  - 결과가 없을 경우에는 EmptyResultDataAccessException 발생

1)  String이나 Integer 같은 공용 객체일 경우 
리턴받을 객체 = JdbcTemplate객체.queryForObject(쿼리문자열, 리턴받을객체.class);

2) 제작한 객체로 받을 경우 query() 메소드와 같이 RowMapper를 이용하여 변환 후 리턴받음
리턴받을 객체 = JdbcTemplate객체.queryForObject(
	쿼리문자열,
	new RowMapper<T>() {
	
	@Override
	public 리턴받을 클래스 mapRow(ResultSet rs, int rowNum) throws SQLException {
		리턴받을 클래스의 객체 생성;
		return 생성된 객체
	}
	}, 쿼리에 필요한 매개변수
);

1-2 query() 메소드
 - 실행결과가 2행 이상일 경우 사용하는 메소드
 	List<T> quert(String sql, RowMapper<T> rowMapper)
 	List<T> quert(String sql, Object[] args, RowMapper<T> rowMapper)
 	List<T> quert(String sql, RowMapper<T> Object... args)
 - sql 매개변수로 전달받은 쿼리를 실행한 결과를 RowMapper를 이용해서 ResultSet의 결과를 자바객체로 변환하여 사용
 - 결과가 없을 경우 size가 0인 List를 리턴함
 - RowMapper 인터페이스의 mapRow() 메소드는 쿼리 실행결과로 구한 ResultSet에서 한 행의 데이터를 읽어와 자바 객체로 변환하는 매퍼 기능을 구현

 - 매퍼 사용법
1) 익명 클래스로 RowMapper 객체를 생성하여 작업 - 단일 작업일 경우 사용됨
List<MemberInfo> result = JdbcTemplate객체.query(
	쿼리문자열, new RowMapper<제네릭>() {
		@Override
		public 리턴받을 클래스 mapRow(ResultSet rs, int rowNum) throws SQLException {
			리턴 받을 클래스의 객체 생성;
			return 생성된 객체;
		}
	}, 쿼리에 필요한 매개변수
);

2) 람다식으로 RowMapper 객체를 생성하여 작업 - 단일 작업일 경우 사용됨

List<MemberInfo> result = JdbcTemplate객체.query(
	쿼리문자열, (ResultSet rs, int rowNum) -> {
		리턴받을 클래스의 객체 생성;
		return 생성된 객체;
	},	쿼리에 필요한 매개변수
);

3) RowMapper 인터페이스를 구현한 클래스로 RowMapper 객체를 생성하여 작업 - 여러 번 사용
List<MemberInfo> result = JdbcTemplate객체.query(
	쿼리문자열, new RowMapper 인터페이스를 구현한 클래스() , 쿼리에 필요한 매개변수
);


public class 인터페이스를 구현한 클래스 implements RowMapper<제네릭> {
	@Override
	public 리턴받을 클래스 mapRow(ResultSet rs, int rowNum) throws SQLException {
			리턴 받을 클래스의 객체 생성;
			return 생성된 객체;
	}
}

2. insert, update, delete 쿼리 실행
 - 데이터를 변경하는 쿼리는 update() 메소르들 사용함
 - update() 메소드는 쿼리 실행 후 변경된 레코드의 개수를 리턴함


※ DataSource 클래스의 주요 프로퍼티 setter메소드들
프로퍼티 setter메소드         설명
setInitialSize(int)         커넥션 풀을 초기화할 때 생성할 초기 커넥션 객체의 개수를 지정. 기본값 : 10
setMaxActive(int)         커넥션 풀에서 가져올 수 있는 최대 커넥션 객체의 개수를 지정. 기본값 : 100
setMaxIdle(int)            커넥션 풀에서 유지할 수 있는 최대 커넥션 객체의 개수를 지정. 기본값 : 100
setMinIdle(int)            커넥션 풀에서 유지할 수 있는 최소 커넥션 객체의 개수를 지정. 기본값 : 10(setInitialSize와 동일)
setMaxWait(int)            커넥션 풀에서 커넥션을 가져올 때 대기하는 최대 시간을 밀리초 단위로 지정. 기본값 : 30000(30초)
setValidationQuery(String)   커넥션이 유효한지 검사할 때 사용할 쿼리를 지정(보통 'select 1'등을 사용) 기본값 : null(검사안함)
setValidationQueryTimeout(int) setValidationQuery()에서 지정한 쿼리의 최대 실행시간으로 초단위로 지정. 기본값 : -1(비활성화)
setTestOnBorrow(boolean)   커넥션 풀에서 커넥션을 가져올 때 검사 여부를 지정. 기본값 : false
setTestOnReturn(boolean)   커넥션 풀에 커넥션을 반환할 때 검사 여부를 지정. 기본값 : false
setTestWhileIdle(boolean)   커넥션 풀에 유휴 상태로 있는 커넥션의 검사 여부를 지정. 기본값 : false
setMinEvictableIdleTimeMillis(int) 기본값 : 60000(60초)
 - 커넥션 풀에 유휴 상태로 유지할 최소 시간을 밀리초 단위로 지정(setTestWhileIdle이 true이면 유휴 시간이 이 값을 넘으면 커넥션을 제거)
setTimeBetweenEvictionRunsMillis(int) 커넥션 풀의 유휴 커넥션을 검사할 주기를 밀리초 단위로 지정. 기본값 : 5000(5초) - 1이하의 값 사용불가
