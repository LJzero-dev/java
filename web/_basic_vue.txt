1. Vue.js
 - 웹프론트엔드 프레임워크로 컴포넌트 기반의 SPA(Single Page Application)를 구축해 줌
 - 컴포넌트
 	웹을 구성하는 로고, 메뉴바, 버튼 등의 패이지내 UI요소들을 의미
 - SPA(Single Page Application)
 	하나의 페이지 안에 여러가지 기능을 넣어 하나로 동작하는 웹 애플리케이션을 의미
	하나의 페이지 안에서 필요한 영역 부분만 로디오디는 형태
	빠른 페이지 전환 및 적은 트래픽 양이 특징임
	단, 첫 로딩시 필요한 js나 css등의 파일을 모두 받아오므로 속도가 느림
 - Vue.js에서 html 요소에 대해 지시하는 명령어를 디렉티브라 하며 문법은 'v-명령어'가 붙음

 - Vue.js를 사용하려면 cdn방식이나 직접 다운로드 하는 방식이 있음
	cdn 방식 : 서버의 Vue.js파일을 연결하여 사용
	<script src="https://cdn.jsdelivr.net/npm/vue/dist/vue.js"></script>
	<!-- 개발버전, 콘솔 경고 포함 -->
	<script src="https://cdn.jsdelivr.net/npm/vue"></script>
	<!-- 상용버전으로 속도와 용량에 최적화 -->
2. Vue 인스턴스
  - vue 인스턴스도 결국 자바스크립트로 동작하는 하나의 인스턴스이므로 자바스크립트에서 선언한 데이터들도 사용할 수 있음
  - spa를 움직이게 작업하는 객체
  - 문법
new Vue({ el: {}, data: {}, method: {}, computed: {} });
또는
var 변수명 = new Vue({ el: {}, data: {}, method: {}, computed: {} });
//	var 대신 const를 사용하기도 함

 - el : 어떤 html요소와 연결할지를 지정하는 옵션
 	id등을 이용하여 연결하며 사용법은 jQuery와 같이 "#id명"으로 함
	어떤 html요소라도 연결가능하지만 보통 범위를 지정할 수 있는 <div>를 사용함
 - data : 프로퍼티(vue에서 사용하는 변수로 생각하면 됨) 선언 영역으로 '프로퍼티명: 값'의 형식으로 여럿 선언할 경우 쉼표로 구분하여 추가함
 - methods : 작업 공간으로 메소드들을 정의할 수 있는 영역이며, 여럿 선언할 경우 쉼표로 구분하여 추가함
 - computed : 계산작업을 하는 공간

3. 데이터 표시
 - vue 인스턴스에서 선언한 프로퍼티의 내용을 출력하는 방법

1) v-text
 - 문법
 	<태그명 v-text="프로퍼티명"></태그명>
 - 지정한 프로퍼티의 값을 지정한 태그에서 보여줌
 - 프로퍼티의 값에 html 태그가 있어도 태그를 그대로 보여줌
 
2) v-html
 - 문법
 	<태그명 v-html="프로퍼티명"></태그명>
 - 지정한 프로퍼티의 값을 지정한 태그에서 보여줌
 - 프로퍼티의 값에 html 태그가 있으면 태그를 실행시켜 보여줌

3) {{}}
 - 문법
 	<태그명>{{ 프로퍼티명 }}</태그명>
 - 지정한 프로퍼티의 값을 지정한 태그에서 보여줌
 - v-text와 같이 프로퍼티의 값에 html 태그가 있어도 태그를 그대로 보여줌
 - 프로퍼티의 값을 출력하는 경우가 많으므로 문법에 예외를 준 경우로 일명 머스태시(mustache,콧수염)라고도 함
 - 가장 많이 사용됨

4. 데이터 타입
 1) 일반형
 - 숫자형, 문자열형, 불린형이 있음
 - 자바스크립트와 같이 vue에서도 입력된 값에 따라 데이터형이 자동으로 결정됨

2) 배열형
 - 문법
배열명: [값1, 값2, ... , 값n]
 - 머스태시에서 인덱스를 통해 접근할 수 있음
 - 배열의 값에는 객체가 들어갈 수도 있음

3) 오브젝트형
 - 키와 값의 쌍으로 이루어진 객체 사용
 - 문법
오브젝트명: {키1:값1, 키2:값2, 키3:[값1, 값2, ... , 값n], 키4:{키1:값1, 키2:값2, ... , 키n:값n}, ... , 키n:값n}
 - 키에는 따옴표를 붙여도 되고 붙이지 않아도 되며 값은 문자열일 경우에만 붙임
 - 값에는 배열이나 다른 객체도 들어갈 수 있음
 - 머스태시에서 .을 통해 접근할 수도 있음

4) 자바스크립트에서 생성한 데이터(변수, 배열, 객체)들도 vue에서 사용할 수 있음

5) vue에서 선언한 모든 데이터 출력
 - {{ $data }} 로 모든 데이터를 출력할 수 있음
 - 주로 사용자가 아닌 개발자들이 사용하며 변수 등의 값을 한 번에 확인할 수 있음

5. 자주 사용하는 디렉티브
1) v-vind
 - html태그의 속성에 vue로 생성한 프로퍼티를 연결시켜주는 명령어
 - 문법
<태그명 v-vind:속성명="프로퍼티명"></태그명>
또는
<태그명 :속성명="프로퍼티명"></태그명>
 - v-bind는 워낙 많이 사용하는 디렉티브이므로 생략이 가능함

 - style속성의 값을 연결할 경우 style속성은 카멜표기법으로 하고, 중괄호로 묶어야 함
 	자바스크립트로 작업하는 것이기에 style속성명을 자바스크립트형으로 변경해야 함
	예) <태그명 v-bind:style="{fontSize:프로퍼티명}"></태그명>

 - class속성의 값을 연결할 경우
 	예1) 클래스 하나를 연결할 경우
	<태그명 v-bind:class:"프로퍼티명"></태그명>
 	예2) 클래스를 둘 이상 연결할 경우
	<태그명 v-bind:class:"[프로퍼티명1, 프로퍼티명2]"></태그명>
 	예3) 클래스를 연결할지 말지를 선택하는 경우
	<태그명 v-bind:class:"{'클래스명':true of false}"></태그명>
	 - 연결여부를 입력할 때 클래스명은 직접 입력해야 하며 true나 false의 값은 해당 값이 들어있는 프로퍼티를 사용해도 됨

2) v-model
 - 사용자가 입력하거나 선택한 값을 vue 인스턴스의 데이터로 받아오는 명령어
 - vue인스턴스의 데이터가 웹 페이지에 출력되고, 입력한 값이 다시 vue 인스턴스의 데이터에 들어오는 방식으로 양방향 바인딩이라고도 함
 - 문법
<태그명 v-model="프로퍼티명"></태그명>

 - 체크박스에서 사용 시 체크박스가 하나면 값은 선택여부에 따라 true와 false를 받아오고, 체크박스가 여러 개일 경우 선택된 체크박스(들)의 값(들)을 받아옴