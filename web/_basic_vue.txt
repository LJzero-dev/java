1. Vue.js
 - 웹프론트엔드 프레임워크로 컴포넌트 기반의 SPA(Single Page Application)를 구축해 줌
 - 컴포넌트
 	웹을 구성하는 로고, 메뉴바, 버튼 등의 패이지내 UI요소들을 의미
 - SPA(Single Page Application)
 	하나의 페이지 안에 여러가지 기능을 넣어 하나로 동작하는 웹 애플리케이션을 의미
	하나의 페이지 안에서 필요한 영역 부분만 로디오디는 형태
	빠른 페이지 전환 및 적은 트래픽 양이 특징임
	단, 첫 로딩시 필요한 js나 css등의 파일을 모두 받아오므로 속도가 느림
 - Vue.js에서 html 요소에 대해 지시하는 명령어를 디렉티브라 하며 문법은 'v-명령어'가 붙음

2. Vue 인스턴스
  - vue 인스턴스도 결국 자바스크립트로 동작하는 하나의 인스턴스이므로 자바스크립트에서 선언한 데이터들도 사용할 수 있음
  - spa를 움직이게 작업하는 객체
  - 문법
new Vue({ el: {}, data: {}, method: {}, computed: {} });
또는
var 변수명 = new Vue({ el: {}, data: {}, method: {}, computed: {} });
//	var 대신 const를 사용하기도 함

 - el : 어떤 html요소와 연결할지를 지정하는 옵션
 	id등을 이용하여 연결하며 사용법은 jQuery와 같이 "#id명"으로 함
	어떤 html요소라도 연결가능하지만 보통 범위를 지정할 수 있는 <div>를 사용함
 - data : 프로퍼티(vue에서 사용하는 변수로 생각하면 됨) 선언 영역으로 '프로퍼티명: 값'의 형식으로 여럿 선언할 경우 쉼표로 구분하여 추가함
 - methods : 작업 공간으로 메소드들을 정의할 수 있는 영역이며, 여럿 선언할 경우 쉼표로 구분하여 추가함
 - computed : 계산작업을 하는 공간

3. 데이터 표시
 - vue 인스턴스에서 선언한 프로퍼티의 내용을 출력하는 방법

1) v-text
 - 문법
 	<태그명 v-text="프로퍼티명"></태그명>
 - 지정한 프로퍼티의 값을 지정한 태그에서 보여줌
 - 프로퍼티의 값에 html 태그가 있어도 태그를 그대로 보여줌
 
2) v-html
 - 문법
 	<태그명 v-html="프로퍼티명"></태그명>
 - 지정한 프로퍼티의 값을 지정한 태그에서 보여줌
 - 프로퍼티의 값에 html 태그가 있으면 태그를 실행시켜 보여줌

3) {{}}
 - 문법
 	<태그명>{{ 프로퍼티명 }}</태그명>
 - 지정한 프로퍼티의 값을 지정한 태그에서 보여줌
 - v-text와 같이 프로퍼티의 값에 html 태그가 있어도 태그를 그대로 보여줌
 - 프로퍼티의 값을 출력하는 경우가 많으므로 문법에 예외를 준 경우로 일명 머스태시(mustache,콧수염)라고도 함
 - 가장 많이 사용됨

4. 데이터 타입
 1) 일반형
 - 숫자형, 문자열형, 불린형이 있음
 - 자바스크립트와 같이 vue에서도 입력된 값에 따라 데이터형이 자동으로 결정됨

2) 배열형
 - 문법
배열명: [값1, 값2, ... , 값n]
 - 머스태시에서 인덱스를 통해 접근할 수 있음
 - 배열의 값에는 객체가 들어갈 수도 있음

3) 오브젝트형
 - 키와 값의 쌍으로 이루어진 객체 사용
 - 문법
오브젝트명: {키1:값1, 키2:값2, 키3:[값1, 값2, ... , 값n], 키4:{키1:값1, 키2:값2, ... , 키n:값n}, ... , 키n:값n}
 - 키에는 따옴표를 붙여도 되고 붙이지 않아도 되며 값은 문자열일 경우에만 붙임
 - 값에는 배열이나 다른 객체도 들어갈 수 있음
 - 머스태시에서 .을 통해 접근할 수도 있음